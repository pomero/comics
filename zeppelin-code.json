{"paragraphs":[{"text":"%pyspark\r\n\r\nimport csv\r\nimport re\r\n\r\nprint(\"Hello comics!\")\r\n\r\nrawRatings = sc.textFile(\"s3://cm-comics-test/input/Ratings.csv\")\r\nrawBooks = sc.textFile(\"s3://cm-comics-test/input/Books.csv\")\r\n\r\n\r\ntoCsv = lambda rawLine: csv.reader([rawLine.encode('utf-8')], delimiter=',', quotechar=\"\\\"\").next()\r\n\r\nratings = rawRatings.map(toCsv)\r\nratingsHeader = ratings.first()\r\nbooks = rawBooks.map(toCsv)\r\nbooksHeader = books.first()\r\nratings = ratings.filter(lambda r: r != ratingsHeader)\r\nbooks = books.filter(lambda r: r != booksHeader)\r\n\r\nratings = ratings.map(lambda r: (int(r[0]), r[1], int(r[2]))).cache()\r\nbooks = books.cache()\r\n# FIXME \r\nnnHash = lambda s: hash(s) & 0x7fffffff\r\nisbnIdMap = ratings.map(lambda r: r[1]).union(books.map(lambda r: r[0])).distinct().map(lambda isbn: (isbn, nnHash(isbn))).cache()\r\n\r\nprint('Rating count:%s' % ratings.count())\r\nprint('Rating sample:%s' % ratings.take(5))\r\nprint('Book count:%s' % books.count())\r\nprint('Book sample:%s' % books.take(5))\r\nprint('ISBN Map count:%s' % isbnIdMap.count())\r\nprint('ISBN Map sample:%s' % isbnIdMap.take(5))\r\n","dateUpdated":"2016-09-07T06:29:05+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473224169289_1639528167","id":"20160906-073152_1726708282","result":{"code":"SUCCESS","type":"TEXT","msg":"Hello comics!\nRating count:1149780\nRating sample:[(276725, '034545104X', 0), (276726, '0155061224', 5), (276727, '0446520802', 0), (276729, '052165615X', 3), (276729, '0521795028', 6)]\nBook count:271379\nBook sample:[['0195153448', 'Classical Mythology', 'Mark P. O. Morford', '2002', 'Oxford University Press', 'http://images.amazon.com/images/P/0195153448.01.THUMBZZZ.jpg', 'http://images.amazon.com/images/P/0195153448.01.MZZZZZZZ.jpg', 'http://images.amazon.com/images/P/0195153448.01.LZZZZZZZ.jpg'], ['0002005018', 'Clara Callan', 'Richard Bruce Wright', '2001', 'HarperFlamingo Canada', 'http://images.amazon.com/images/P/0002005018.01.THUMBZZZ.jpg', 'http://images.amazon.com/images/P/0002005018.01.MZZZZZZZ.jpg', 'http://images.amazon.com/images/P/0002005018.01.LZZZZZZZ.jpg'], ['0060973129', 'Decision in Normandy', \"Carlo D'Este\", '1991', 'HarperPerennial', 'http://images.amazon.com/images/P/0060973129.01.THUMBZZZ.jpg', 'http://images.amazon.com/images/P/0060973129.01.MZZZZZZZ.jpg', 'http://images.amazon.com/images/P/0060973129.01.LZZZZZZZ.jpg'], ['0374157065', 'Flu: The Story of the Great Influenza Pandemic of 1918 and the Search for the Virus That Caused It', 'Gina Bari Kolata', '1999', 'Farrar Straus Giroux', 'http://images.amazon.com/images/P/0374157065.01.THUMBZZZ.jpg', 'http://images.amazon.com/images/P/0374157065.01.MZZZZZZZ.jpg', 'http://images.amazon.com/images/P/0374157065.01.LZZZZZZZ.jpg'], ['0393045218', 'The Mummies of Urumchi', 'E. J. W. Barber', '1999', 'W. W. Norton &amp; Company', 'http://images.amazon.com/images/P/0393045218.01.THUMBZZZ.jpg', 'http://images.amazon.com/images/P/0393045218.01.MZZZZZZZ.jpg', 'http://images.amazon.com/images/P/0393045218.01.LZZZZZZZ.jpg']]\nISBN Map count:341765\nISBN Map sample:[('0393314324', 685309952), ('00918800X8', 752484352), ('1576734153', 1575658384), ('3150034914', 2079025056), ('3746618320', 340737008)]\n"},"dateCreated":"2016-09-07T04:56:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:131","dateFinished":"2016-09-07T06:29:21+0000","dateStarted":"2016-09-07T06:29:05+0000","focus":true},{"text":"%pyspark\r\n\r\nimport numpy\r\n\r\ncomicRatingJoinned = ratings.map(lambda r: (r[1], r[2])).groupByKey().map(lambda (id, rate): (id, (len(rate), numpy.average([int(r) for r in rate])))).join(books.map(lambda book: (book[0], book[1:]))).cache()\r\nshowData = comicRatingJoinned.map(lambda r: (r[1][0][1], r[1][1][0], r[1][0][0])).cache()\r\nsortedData = showData.map(lambda x: (x[0], x)).filter(lambda x: 500 < x[1][2]).sortByKey(ascending=False).map(lambda x: x[1])\r\nfor a in sortedData.collect():\r\n    print(a)\r\n","dateUpdated":"2016-09-07T04:57:17+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473224169292_1638373920","id":"20160906-073205_825844625","result":{"code":"ERROR","type":"TEXT","msg":"Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 17 in stage 7.0 failed 4 times, most recent failure: Lost task 17.3 in stage 7.0 (TID 54, ip-172-31-2-56.ap-northeast-1.compute.internal): ExecutorLostFailure (executor 5 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 7.1 GB of 6.9 GB virtual memory used. Consider boosting spark.yarn.executor.memoryOverhead.\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1450)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1438)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1437)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1437)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:811)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:811)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:811)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1659)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1618)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1607)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:632)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1871)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1884)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1897)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1911)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:893)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:358)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:892)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:453)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:237)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:128)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:211)\n\tat java.lang.Thread.run(Thread.java:745)\n\n(<class 'py4j.protocol.Py4JJavaError'>, Py4JJavaError(u'An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\\n', JavaObject id=o222), <traceback object at 0x7f9b29660cb0>)"},"dateCreated":"2016-09-07T04:56:09+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:132","dateFinished":"2016-09-07T04:58:09+0000","dateStarted":"2016-09-07T04:57:17+0000","focus":true},{"text":"%pyspark\n\nfrom pyspark.mllib.recommendation import ALS\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nnnHash = lambda s: hash(s) & 0x7fffffff\ntraining, evaluation, testing = ratings.map(lambda x: (x[0], nnHash(x[1]), x[2])).randomSplit([6, 2, 2], seed=0)\nprint 'Training: %d, Eval:%d, Testing:%d' % (training.count(), evaluation.count(), testing.count())\nprint 'Training sample:%s' % training.take(3)\n\nevaluationForPredict = evaluation.map(lambda x: (x[0], x[1]))\nprint \"evaluationForPredict: %s\" % evaluationForPredict.take(3)\nactualReformatted = evaluation.map(lambda x: ((x[0], x[1]), x[2]))\nprint \"actualReformatted: %s\" % actualReformatted.take(3)\n\nseed = 5L\niterations = [5,7,10]\nregularizationParameter = 0.1\nranks = [4, 8, 12]\nRMSEs = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nerr = 0\ntolerance = 0.03\nbestIteretioin = 0\nevaluator = RegressionEvaluator(predictionCol=\"raw\")\n\nminRMSE = float('inf')\nbestRank = -1\nbestIteration = -1\nfor rank in ranks:\n    for iteration in iterations:\n        model = ALS.train(training, rank, seed=seed, iterations=iteration)\n        predictedRatings = model.predictAll(evaluationForPredict)\n        predictedReformatted = predictedRatings.map(lambda x: ((x[0], x[1]), x[2]))\n        predictionAndObservations = predictedReformatted.join(actualReformatted).map(lambda x: x[1])\n        dataset = spark.createDataFrame(predictionAndObservations.collect(), [\"raw\", \"label\"])\n        metrics = evaluator.evaluate(dataset)\n        RMSE = metrics\n        RMSEs[err] = RMSE\n        err += 1\n\n        print 'For rank %s and itereation %s, the RMSE is %s' % (rank, iteration, RMSE)\n        if RMSE < minRMSE:\n            minRMSE = RMSE\n            bestIteretioin = iteration\n            bestRank = rank\n\n\nprint 'The best model was trained with rank %s and iteratin %s'  % (bestRank, bestIteretion)\n","dateUpdated":"2016-09-07T07:08:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","lineNumbers":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473224169292_1638373920","id":"20160906-073338_1774957112","result":{"code":"ERROR","type":"TEXT","msg":"Training: 689822, Eval:229843, Testing:230115\nTraining sample:[(276726, 1704522300, 5), (276727, 1005420063, 0), (276733, 670354030, 0)]\nevaluationForPredict: [(276729, 1096987079), (276729, 1728062517), (276746, 1061420580)]\nactualReformatted: [((276729, 1096987079), 3), ((276729, 1728062517), 6), ((276746, 1061420580), 0)]\nFor rank 4 and itereation 5, the RMSE is 8.13021326687\nFor rank 4 and itereation 7, the RMSE is 7.93882012194\nFor rank 4 and itereation 10, the RMSE is 7.5877433017\nFor rank 8 and itereation 5, the RMSE is 6.53802958488\nFor rank 8 and itereation 7, the RMSE is 6.21518920837\nFor rank 8 and itereation 10, the RMSE is 5.93439164927\nFor rank 12 and itereation 5, the RMSE is 5.94346863751\nFor rank 12 and itereation 7, the RMSE is 5.70544992479\nFor rank 12 and itereation 10, the RMSE is 5.53080444823\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5171642133113445574.py\", line 252, in <module>\n    eval(compiledCode)\n  File \"<string>\", line 38, in <module>\nNameError: name 'bestIteretion' is not defined\n"},"dateCreated":"2016-09-07T04:56:09+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:133","dateFinished":"2016-09-07T07:06:56+0000","dateStarted":"2016-09-07T06:58:08+0000","focus":true},{"text":"%pyspark\n\nimport re\n\nprint ratings.count()\ninvalid = ratings.filter(lambda r: not re.match('^[0-9]+[0-9X]$', r[1]))\n\nprint invalid.count()\nprint invalid.take(100)\n","dateUpdated":"2016-09-07T04:58:24+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473224169293_1637989171","id":"20160906-074044_673882583","result":{"code":"SUCCESS","type":"TEXT","msg":"1138698\n304\n[('276884', 'B158991965', '6'), ('1582', 'O809463121', '5'), ('2333', 'O76790592X', '0'), ('3675', 'B460712002', '0'), ('4887', 'O439285127', '9'), ('5448', 'O590603647', '8'), ('5630', 'I860460437', '0'), ('6100', 'O345438329', '0'), ('6389', 'O42516313X', '5'), ('6389', 'O451160533', '6'), ('6389', 'O553375067', '8'), ('6829', 'O571200338', '8'), ('7137', 'B156682003', '5'), ('7930', 'O312975651', '4'), ('8732', 'O385720114', '7'), ('11037', 'I863710345', '10'), ('11360', 'O380788632', '0'), ('11676', 'O316666343', '10'), ('11676', 'O385499558', '8'), ('11676', 'O425126064', '8'), ('11676', 'O425155404', '4'), ('11676', 'O42516313X', '0'), ('11676', 'O439060737', '10'), ('11676', 'O446611638', '7'), ('11676', 'O805063196', '0'), ('11676', 'X000000000', '10'), ('12438', 'O345438329', '0'), ('13881', 'O684815451', '0'), ('14060', 'O749316780', '0'), ('16795', 'O451203771', '0'), ('17885', 'O679731148', '8'), ('19355', 'X000000000', '0'), ('23288', 'O889950962', '0'), ('23924', 'O440223458', '9'), ('24462', 'B245922004', '0'), ('24651', 'O395079985', '9'), ('24890', 'O688088686', '9'), ('26583', 'Q380708353', '9'), ('28037', 'B338032003', '0'), ('28586', 'X439361760', '5'), ('31531', 'O770109853', '6'), ('32942', 'O425189988', '8'), ('35079', 'M060080012', '5'), ('38050', 'O446611638', '7'), ('38273', 'O590418262', '4'), ('39785', 'O375700757', '7'), ('41359', 'O006485200', '0'), ('43246', 'O67174142X', '6'), ('43946', 'B120841963', '0'), ('44468', 'B485082003', '0'), ('45351', 'O425173526', '8'), ('48449', 'I58243123X', '0'), ('48971', 'O895771594', '10'), ('50073', 'O679753338', '0'), ('51094', 'O590477412', '0'), ('51829', 'O684813637', '7'), ('52716', 'O140257934', '10'), ('54107', 'O553275380', '3'), ('55700', 'O297818252', '0'), ('55724', 'O747514674', '8'), ('58873', 'O06093090X', '8'), ('59311', 'O380726033', '8'), ('59971', 'B156682003', '0'), ('59971', 'O316666343', '0'), ('60244', 'O385509510', '0'), ('61350', 'O43400801X', '0'), ('61704', 'O385425414', '0'), ('61885', 'O786001690', '0'), ('61967', 'O967733618', '10'), ('63694', 'O316601950', '0'), ('67930', 'O446363618', '0'), ('68499', 'N426080648', '0'), ('69410', 'O312289871', '7'), ('70381', 'M197711969', '0'), ('70539', 'O671040588', '5'), ('70798', 'I853264636', '0'), ('73548', 'I568651597', '0'), ('73670', 'O373245696', '5'), ('74300', 'I556591608', '0'), ('74989', 'Q552146269', '0'), ('78524', 'O39914854X', '6'), ('78860', 'Q207142688', '0'), ('79081', 'O345447239', '8'), ('79660', 'O552135941', '5'), ('79828', 'O880640129', '0'), ('79923', 'O67174142X', '0'), ('80954', 'O156445441', '0'), ('81015', 'O441555292', '8'), ('81298', 'O440222656', '0'), ('81298', 'O440495962', '0'), ('82926', 'O786001690', '0'), ('83803', 'O06093090X', '8'), ('85496', 'O312979479', '5'), ('85757', 'O060987103', '0'), ('85884', 'O967733618', '0'), ('85945', 'O895773422', '8'), ('87698', 'B416442003', '5'), ('88352', 'O140075127', '7'), ('90300', 'O671004395', '0'), ('90300', 'O786011041', '10')]\n"},"dateCreated":"2016-09-07T04:56:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:134","dateFinished":"2016-09-07T04:58:39+0000","dateStarted":"2016-09-07T04:58:24+0000","focus":true},{"dateUpdated":"2016-09-07T04:56:09+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1473224169294_1639143418","id":"20160906-082224_1728148121","dateCreated":"2016-09-07T04:56:09+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:135"}],"name":"python","id":"2BW1AEBAD","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}